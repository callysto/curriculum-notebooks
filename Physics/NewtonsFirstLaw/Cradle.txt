<head>
    <script src="//cdnjs.cloudflare.com/ajax/libs/d3/4.8.0/d3.min.js"></script>
    <script src="//unpkg.com/d3-force-bounce"></script>
    <script src="//unpkg.com/d3-force-constant"></script>
</head>

<style>
body {
    margin: 0;
    text-align: center;
}

.ball {
    cursor: grab;
    cursor: -webkit-grab;
}

.ball:active {
    cursor: grabbing;
    cursor: -webkit-grabbing;
}
</style>

<body>
    <svg id="canvas">
        <defs>
            <radialGradient id="sphere-gradient">
                <stop offset="0%" stop-color="MediumPurple"></stop>
                <stop offset="100%" stop-color="Indigo"></stop>
            </radialGradient>
        </defs>
    </svg>

<script>

var width = 400, height = 400
const BALL_SIZE = 20,
	SPRING_LENGTH = window.innerHeight/ 2,
	GRAVITY = 0.6;

const canvasWidth = window.innerWidth,
	canvasHeight = window.innerHeight;

// DOM nodes
const svgCanvas = d3.select('svg#canvas')
		.attr('width', canvasWidth)
		.attr('height', canvasHeight),
	springsG = svgCanvas.append('g'),
	ballsG = svgCanvas.append('g');

svgCanvas.append('rect')
	.attr('x', canvasWidth/2 - 4*BALL_SIZE - 10)
	.attr('y', canvasHeight*2/3 - SPRING_LENGTH - 5)
	.attr('width', BALL_SIZE*8 + 20)
	.attr('height', 10)
	.attr('rx', 5)
	.attr('ry', 5)
	.attr('fill', 'MediumPurple');

const balls = [
		{ id: '0', init: { x: canvasWidth/2 - 4*BALL_SIZE, y: canvasHeight*2/3 } },
		{ id: '1', init: { x: canvasWidth/2 - 2*BALL_SIZE, y: canvasHeight*2/3 } },
		{ id: '2', init: { x: canvasWidth/2 - 0*BALL_SIZE, y: canvasHeight*2/3 } },
		{ id: '3', init: { x: canvasWidth/2 + 2*BALL_SIZE, y: canvasHeight*2/3 } },
		{ id: '4', init: { x: canvasWidth/2 + 4*BALL_SIZE, y: canvasHeight*2/3 } }
	],
	pivots = balls.map(ball => ({
		id: 'a' + ball.id,
		fx: ball.init.x,
		fy: ball.init.y - SPRING_LENGTH
	})),
	springs = balls.map(ball => ({
		source: ball.id,
		target: 'a' + ball.id
	}));

	// Start the motion, moving the left-most ball
	balls[0].init.x -= SPRING_LENGTH;
	balls[0].init.y -= SPRING_LENGTH;

let init = false;

const forceSim = d3.forceSimulation()
	.alphaDecay(0)
	.velocityDecay(0)
	.nodes([...balls, ...pivots])
	.force('gravity', d3.forceConstant()
		.strength(GRAVITY)
		.direction(90)
	)
	.force('wires', d3.forceLink(springs)
		.id(node => node.id)
		.distance(SPRING_LENGTH)
		.strength(0.4)
	)
	.force('bounce', d3.forceBounce()
		.radius(node => BALL_SIZE)
	)
	.force('init', () => {
		if (!init) {
			balls.forEach((ball) => {
				ball.x = ball.init.x;
				ball.y = ball.init.y;
				ball.vx = 0;
				ball.vy = 0;
			});
			init = true;
		}
	})
	.on('tick', () => { ballDigest(); springDigest(); });

//

function ballDigest() {
	let ball = ballsG.selectAll('circle.ball').data(balls);

	ball.exit().remove();

	ball.merge(
		ball.enter().append('circle')
			.classed('ball', true)
			.attr('r', BALL_SIZE)
			.attr('fill', 'url(#sphere-gradient)')
			.call(d3.drag()
				.on("start", d => { d.fx = d.x; d.fy = d.y; })
				.on("drag", d => { d.fx = d3.event.x; d.fy = d3.event.y; })
				.on("end", d => { d.fx = null; d.fy = null; })
			)
	)
		.attr('cx', d => d.x)
		.attr('cy', d => d.y);
}

function springDigest() {
	let spring = springsG.selectAll('line.wire').data(springs);

	spring.exit().remove();

	spring.merge(
		spring.enter().append('line')
			.classed('wire', true)
			.attr('stroke', 'slategrey')
			.attr('stroke-width', 1)
	)
		.attr('x1', d => d.source.x)
		.attr('y1', d => d.source.y)
		.attr('x2', d => d.target.x)
		.attr('y2', d => d.target.y);
}
  </script>
</body>
</html>