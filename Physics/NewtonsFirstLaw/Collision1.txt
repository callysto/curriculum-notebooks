<head>
    <script src="//cdnjs.cloudflare.com/ajax/libs/d3/4.8.0/d3.min.js"></script>
    <script src="//unpkg.com/d3-force-bounce"></script>
    <script src="//unpkg.com/d3-force-constant"></script>
</head>

<style>
body {
    margin: 0;
    text-align: center;
}

.ball {
    cursor: grab;
    cursor: -webkit-grab;
}

.ball:active {
    cursor: grabbing;
    cursor: -webkit-grabbing;
}
</style>

<body>
    <svg id="canvas">
        <defs>
            <radialGradient id="sphere-gradient">
                <stop offset="0%" stop-color="MediumPurple"></stop>
                <stop offset="100%" stop-color="Indigo"></stop>
            </radialGradient>
        </defs>
    </svg>

<script>

var width = 400, height = 400
const BALL_SIZE = 20,
	BALL_OFFSET = window.innerHeight/8,
    BALL_SPEED = 3;

const canvasWidth = window.innerWidth,
	canvasHeight = window.innerHeight;

// DOM nodes
const svgCanvas = d3.select('svg#canvas')
		.attr('width', canvasWidth)
		.attr('height', canvasHeight),
	ballsG = svgCanvas.append('g');

const balls = [
		{ id: '0', init: { x: canvasWidth/2 - 6*BALL_SIZE, y: canvasHeight*1/3, vx: 0, vy: 0 } },
		{ id: '1', init: { x: canvasWidth/2 - 3*BALL_SIZE, y: canvasHeight*1/3, vx: 0, vy: 0 } },
		{ id: '2', init: { x: canvasWidth/2 - 0*BALL_SIZE, y: canvasHeight*1/3, vx: 0, vy: 0 } },
		{ id: '3', init: { x: canvasWidth/2 + 3*BALL_SIZE, y: canvasHeight*1/3, vx: 0, vy: 0 } },
		{ id: '4', init: { x: canvasWidth/2 + 6*BALL_SIZE, y: canvasHeight*1/3, vx: 0, vy: 0 } }
	];

	// start the left ball moving, at a reasonable speed
	balls[0].init.x -= BALL_OFFSET;
	balls[0].init.y -= 0;
    balls[0].init.vx = BALL_SPEED;

let init = false;

const forceSim = d3.forceSimulation()
	.alphaDecay(0)
	.velocityDecay(0)
	.nodes([...balls])
	.force('elastic', d3.forceBounce()
		.radius(node => BALL_SIZE)
        .elasticity(1)
	)
	.force('init', () => {
		if (!init) {
			balls.forEach((ball) => {
				ball.x = ball.init.x;
				ball.y = ball.init.y;
				ball.vx = ball.init.vx;
				ball.vy = ball.init.vy;
			});
			init = true;
		}
	})
	.on('tick', () => { ballDigest(); });

//

// Periodical kickstart
kickStart();
setInterval(kickStart, 5000);

function ballDigest() {
	let ball = ballsG.selectAll('circle.ball').data(balls);

	ball.exit().remove();

	ball.merge(
		ball.enter().append('circle')
			.classed('ball', true)
			.attr('r', BALL_SIZE)
			.attr('fill', 'url(#sphere-gradient)')
			.call(d3.drag()
				.on("start", d => { d.fx = d.x; d.fy = d.y; })
				.on("drag", d => { d.fx = d3.event.x; d.fy = d3.event.y; })
				.on("end", d => { d.fx = null; d.fy = null; })
			)
	)
		.attr('cx', d => d.x)
		.attr('cy', d => d.y);
}

function kickStart() {
			balls.forEach((ball) => {
				ball.x = ball.init.x;
				ball.y = ball.init.y;
				ball.vx = ball.init.vx;
				ball.vy = ball.init.vy;
			});
}


  </script>
</body>
</html>